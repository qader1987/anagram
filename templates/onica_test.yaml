Description:
  This template creates a VPC with two public and private subnets. 
  It will create Internet Gateway, with a default route on the public subnets. 
  It will create two NAT gateways, one for each private subnet.

Parameters:
  Env:
    Description: An environment name
    Type: String
  VpcCIDR:
    Description: Please enter CIDR for this VPC
    Type: String
    Default: 10.10.0.0/16
  PubSubnet1CIDR:
    Description: Please enter CIDR for the public subnet 1
    Type: String
    Default: 10.10.1.0/24
  PubSubnet2CIDR:
    Description: Please enter CIDR for the public subnet 2
    Type: String
    Default: 10.10.2.0/24
  PrivSubnet1CIDR:
    Description: Please enter CIDR for the private subnet 1
    Type: String
    Default: 10.10.3.0/24
  PrivSubnet2CIDR:
    Description: Please enter CIDR for the private subnet 2
    Type: String
    Default: 10.10.4.0/24
  
  KeyName:
    Description: The EC2 Key Pair 
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AMI:
    Description: "AMI for ec2 instances"
    Type: String
    Default: 'ami-08f3d892de259504d'
  SshCidr:
    Description: The IP range for EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Env} VPC

  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Env} Public Subnet 1

  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PubSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Public Subnet 2

  PrivSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Private Subnet 1

  PrivSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref Env

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PubSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PubSubnet2

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet1

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet2


  PrivRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRouteTable1
      SubnetId: !Ref PrivSubnet1

  PrivRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Owner
          Value: !Sub ${Env} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRouteTable2
      SubnetId: !Ref PrivSubnet2

  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB-SG
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Sub [!Ref VPC] VPCID 
  ELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: 'HTTP:80/'
        Timeout: '5'
        UnhealthyThreshold: '2'
      LoadBalancerName: elb
      Listeners:
        - InstancePort: '80'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Sub [!Ref VPC]-PublicSubnets


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  PubSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PubSubnet1, !Ref PubSubnet2 ]]
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnets'

  PrivSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivSubnet1, !Ref PrivSubnet2 ]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivSubnets'

  PubSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PubSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnet1'

  PubSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PubSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnet2'

  PrivSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivSubnet1'

  PrivSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivSubnet2'
